{
	"Rfluxx Class Store": {
		"prefix": "rfluxx_store",
		"body": [
			"import { IAction, IInjectedStoreOptions, IStore, Store } from \"rfluxx\";",
            "",
            "/**",
            " * The state of the store { @see $1Store }.",
            " */",
            "export interface I$1StoreState",
            "{",
            "    /**",
            "     * A string value set by the example action @setString.",
            "     */",
            "    someString: string;",
            "}",
            "",
            "/**",
            " * The options to configure the store { @see $1Store }.",
            " */",
            "export interface I$1StoreOptions",
            "{",
            "}",
            "",
            "/**",
            " * The interface that exposes the commands of the store { @see $1Store }.",
            " */",
            "export interface I$1Store",
            "{",
            "    /**",
            "     * Example action that sets a string in the store state",
            "     */",
            "    setString: IAction<string>;",
            "}",
            "",
            "/**",
            " * Store that $2.",
            " */",
            "export class $1Store",
            "    extends Store<I$1StoreState> implements I$1Store",
            "{",
            "    /**",
            "     * @inheritdoc",
            "     */",
            "    public readonly setString: IAction<string>;",
            "",
            "    constructor(private options: I$1StoreOptions)",
            "    {",
            "        super({",
            "            initialState: {",
            "                someString: \"\"",
            "            }",
            "        });",
            "",
            "        this.setString = this.createActionAndSubscribe(x => this.onSetString(x));",
            "    }",
            "",
            "    private onSetString(someString: string)",
            "    {",
            "        this.setState({",
            "            ...this.state,",
            "            someString",
            "        });",
            "    }",
            "}",
            ""

		],
		"description": "A full rfluxx store including state, options etc."
    },
    "Rfluxx Bound Component": {
		"prefix": "rfluxx_bound_comp",
		"body": [
			"import * as React from \"react\";",
      "import { subscribeStoreSelect } from \"rfluxx\";",
      "",
      "import { I$3Store, I$3StoreState } from \"./$3Store\";",
      "",
      "/**",
      " * State for { @$1 }",
      " */",
      "export interface I$1State",
      "{",
      "",
      "}",
      "",
      "/**",
      " * Props for { @$1 }",
      " */",
      "export interface I$1Props",
      "{",
      "    /**",
      "     * A string prop that can be shown.",
      "     */",
      "    someString: string;",
      "",
      "    /**",
      "     * A handler to set the value of the string prop.",
      "     */",
      "    setString: (evt: React.ChangeEvent) => void;",
      "}",
      "",
      "/**",
      " * Component that $2.",
      " */",
      "export class $1 extends React.Component<I$1Props, I$1State>",
      "{",
      "    /**",
      "     * Renders the component.",
      "     */",
      "    public render(): React.ReactNode",
      "    {",
      "        return <input type=\"text\"",
      "                      value={this.props.someString}",
      "                      onChange={this.props.setString}/>;",
      "    }",
      "}",
      "",
      "// this code binds the component to the $3Store",
      "// the actual instance of the $3Store is not yet given",
      "export const $1Bound = subscribeStoreSelect<I$3Store, I$3StoreState>()(",
      "    $1,",
      "    (storeState, store) => ({",
      "        // bind the stores state to this components props",
      "        someString: storeState.someString,",
      "        // bind a call to an action to a handler in this components props",
      "        setString: e => store.setString.trigger(e.target.value)",
      "    })",
      ");",
      ""
		],
		"description": "A simple react component with binding to a store."
	},
    "Rfluxx Bound Material-UI Component": {
		"prefix": "rfluxx_mui_comp",
		"body": [
      "import { createStyles, Theme, WithStyles } from \"@material-ui/core\";",
      "import withStyles from \"@material-ui/core/styles/withStyles\";",
			"import * as React from \"react\";",
      "import { subscribeStoreSelect } from \"rfluxx\";",
      "",
      "import { I$3Store, I$3StoreState } from \"./$3Store\";",
      "",
      "export const styles = (theme: Theme) => createStyles({",
      "    root: {",
      "    }",
      "});",
      "",
      "/**",
      " * State for { @$1 }",
      " */",
      "export interface I$1State",
      "{",
      "",
      "}",
      "",
      "/**",
      " * Props for { @$1 }",
      " */",
      "export interface I$1Props",
      "    extends WithStyles<typeof styles>",
      "{",
      "    /**",
      "     * A string prop that can be shown.",
      "     */",
      "    someString: string;",
      "",
      "    /**",
      "     * A handler to set the value of the string prop.",
      "     */",
      "    setString: (evt: React.ChangeEvent) => void;",
      "}",
      "",
      "/**",
      " * Component that $2.",
      " */",
      "export const $1 = withStyles(styles)(",
      "    class extends React.Component<I$1Props, I$1State>",
      "    {",
      "        /**",
      "         * Renders the component.",
      "         */",
      "        public render(): React.ReactNode",
      "        {",
      "            const { classes, ...rest } = this.props;",
      "",
      "            return <input type=\"text\"",
      "                          value={this.props.someString}",
      "                          onChange={this.props.setString}",
      "                          className={classes.root}/>;",
      "        }",
      "    }",
      ");",
      "",
      "// this code binds the component to the $3Store",
      "// the actual instance of the $3Store is not yet given",
      "export const $1Bound = subscribeStoreSelect<I$3Store, I$3StoreState>()(",
      "    $1,",
      "    (storeState, store) => ({",
      "        // bind the stores state to this components props",
      "        someString: storeState.someString,",
      "        // bind a call to an action to a handler in this components props",
      "        setString: e => store.setString.trigger(e.target.value)",
      "    })",
      ");",
      ""
		],
		"description": "A material-ui react component with binding to a store."
	}
}