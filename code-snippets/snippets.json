{
  "Rfluxx Class Store": {
		"prefix": "rfluxx_store",
		"body": [
			"import { IAction, IInjectedStoreOptions, IStore, Store } from \"rfluxx\";",
            "",
            "/**",
            " * The state of the store { @see $1Store }.",
            " */",
            "export interface I$1StoreState",
            "{",
            "    /**",
            "     * A string value set by the example action @setString.",
            "     */",
            "    someString: string;",
            "}",
            "",
            "/**",
            " * The options to configure the store { @see $1Store }.",
            " */",
            "export interface I$1StoreOptions",
            "    extends IInjectedStoreOptions",
            "{",
            "}",
            "",
            "/**",
            " * The interface that exposes the commands of the store { @see $1Store }.",
            " */",
            "export interface I$1Store extends IStore<I$1StoreState>",
            "{",
            "    /**",
            "     * Example action that sets a string in the store state",
            "     */",
            "    setString: IAction<string>;",
            "}",
            "",
            "/**",
            " * Store that $2.",
            " */",
            "export class $1Store",
            "    extends Store<I$1StoreState> implements I$1Store",
            "{",
            "    /**",
            "     * @inheritdoc",
            "     */",
            "    public readonly setString: IAction<string>;",
            "",
            "    constructor(private options: I$1StoreOptions)",
            "    {",
            "        super({",
            "            initialState: {",
            "                someString: \"\"",
            "            }",
            "        });",
            "",
            "        this.setString = this.createActionAndSubscribe(x => this.onSetString(x));",
            "    }",
            "",
            "    private onSetString(someString: string)",
            "    {",
            "        this.setState({",
            "            ...this.state,",
            "            someString",
            "        });",
            "    }",
            "}",
            ""

		],
		"description": "A full rfluxx store including state, options etc."
  },
  "Rfluxx Site Map Node Container Factory": {
    "prefix": "rfluxx_smn_containerfactory",
    "body": [
      "import { IContainer, IContainerBuilder, registerStore, resolveStore } from \"rfluxx\";",
      "import { ISiteMapNodeContainerBuilder, SiteMapNodeContainerFactoryBase } from \"rfluxx-routing\";",
      "",
      "import { $1Store } from \"./$1Store\";",
      "",
      "export class ContainerFactory extends SiteMapNodeContainerFactoryBase",
      "{",
      "    protected registerStores(builder: ISiteMapNodeContainerBuilder): void",
      "    {",
      "        registerStore(builder, \"I$1Store\", (c, injOpt) => new $1Store(injOpt({",
      "        })));",
      "    }",
      "}"        
    ],
    "description": "A template for a container factory of a page/sitemap node"
  },
  "Rfluxx Default Language": {
		"prefix": "rfluxx_i18n_deflang",
		"body": [
			"export type ResourceTexts = typeof resources;",
      "",
      "export const resources = {",
      "    text1: \"The first resource text\",",
      "};",
      ""
		],
		"description": "The default language for your internationalization."
  },
  "Rfluxx Language": {
		"prefix": "rfluxx_i18n_lang",
		"body": [
			"import { ResourceTexts } from \"./${1:Resources.en}\";",
      "",
      "export const resources: ResourceTexts = {",
      "    text1: \"The first resource text in this language\",",
      "};",
      ""
		],
		"description": "Another language for your internationalization."
  },
  "Rfluxx I18N Setup": {
		"prefix": "rfluxx_i18n_setup",
		"body": [
      "import { ILanguage, CreateResourceTextComponent } from \"rfluxx-i18n\";",
      "import { ResourceTexts, resources as resourcesEn } from \"./${1:Resources.en}\";",
      "import { resources as resourcesDe } from \"./${2:Resources.de}\";",
      "",
      "export const ResourceText = CreateResourceTextComponent<ResourceTexts>();",
      "",
      "export type Language = ILanguage<ResourceTexts>;",
      "",
      "export const languages: Language[] = [",
      "    {",
      "        key: \"en\",",
      "        caption: \"English\",",
      "        resources: resourcesEn",
      "    },",
      "    {",
      "        key: \"de\",",
      "        caption: \"Deutsch\",",
      "        resources: resourcesDe",
      "    }",
      "];"
    ],
		"description": "Configuration for your internationalization."
  }
}