{
    "Rfluxx Bound Component": {
		"prefix": "rfluxx_bound_comp",
		"body": [
			"import * as React from \"react\";",
      "import { subscribeStoreSelect } from \"rfluxx-react\";",
      "",
      "import { I$3Store, I$3StoreState } from \"./$3Store\";",
      "",
      "/**",
      " * State for { @$1 }",
      " */",
      "export interface I$1State",
      "{",
      "",
      "}",
      "",
      "/**",
      " * Props for { @$1 }",
      " */",
      "export interface I$1Props",
      "{",
      "    /**",
      "     * A string prop that can be shown.",
      "     */",
      "    someString: string;",
      "",
      "    /**",
      "     * A handler to set the value of the string prop.",
      "     */",
      "    setString: (evt: React.ChangeEvent) => void;",
      "}",
      "",
      "/**",
      " * Component that $2.",
      " */",
      "export class $1 extends React.Component<I$1Props, I$1State>",
      "{",
      "    /**",
      "     * Renders the component.",
      "     */",
      "    public render(): React.ReactNode",
      "    {",
      "        return <input type=\"text\"",
      "                      value={this.props.someString}",
      "                      onChange={this.props.setString}/>;",
      "    }",
      "}",
      "",
      "// this code binds the component to the $3Store",
      "// the actual instance of the $3Store is not yet given",
      "export const $1Bound = subscribeStoreSelect<I$3Store, I$3StoreState>()(",
      "    $1,",
      "    (storeState, store) => ({",
      "        // bind the stores state to this components props",
      "        someString: storeState.someString,",
      "        // bind a call to an action to a handler in this components props",
      "        setString: e => store.setString.trigger(e.target.value)",
      "    })",
      ");",
      ""
		],
		"description": "A simple react component with binding to a store."
	},
    "Rfluxx Bound Material-UI Component": {
		"prefix": "rfluxx_mui_comp",
		"body": [
      "import { createStyles, Theme, WithStyles } from \"@material-ui/core\";",
      "import withStyles from \"@material-ui/core/styles/withStyles\";",
			"import * as React from \"react\";",
      "import { subscribeStoreSelect } from \"rfluxx-react\";",
      "",
      "import { I$3Store, I$3StoreState } from \"./$3Store\";",
      "",
      "export const styles = (theme: Theme) => createStyles({",
      "    root: {",
      "    }",
      "});",
      "",
      "/**",
      " * State for { @$1 }",
      " */",
      "export interface I$1State",
      "{",
      "",
      "}",
      "",
      "/**",
      " * Props for { @$1 }",
      " */",
      "export interface I$1Props",
      "    extends WithStyles<typeof styles>",
      "{",
      "    /**",
      "     * A string prop that can be shown.",
      "     */",
      "    someString: string;",
      "",
      "    /**",
      "     * A handler to set the value of the string prop.",
      "     */",
      "    setString: (evt: React.ChangeEvent) => void;",
      "}",
      "",
      "/**",
      " * Component that $2.",
      " */",
      "export const $1 = withStyles(styles)(",
      "    class extends React.Component<I$1Props, I$1State>",
      "    {",
      "        /**",
      "         * Renders the component.",
      "         */",
      "        public render(): React.ReactNode",
      "        {",
      "            const { classes, ...rest } = this.props;",
      "",
      "            return <input type=\"text\"",
      "                          value={this.props.someString}",
      "                          onChange={this.props.setString}",
      "                          className={classes.root}/>;",
      "        }",
      "    }",
      ");",
      "",
      "// this code binds the component to the $3Store",
      "// the actual instance of the $3Store is not yet given",
      "export const $1Bound = subscribeStoreSelect<I$3Store, I$3StoreState>()(",
      "    $1,",
      "    (storeState, store) => ({",
      "        // bind the stores state to this components props",
      "        someString: storeState.someString,",
      "        // bind a call to an action to a handler in this components props",
      "        setString: e => store.setString.trigger(e.target.value)",
      "    })",
      ");",
      ""
		],
		"description": "A material-ui react component with binding to a store."
  },
  "Rfluxx Func Component": {
		"prefix": "rfluxx_func_comp",
		"body": [
      "import * as React from \"react\";",
      "import { useCallback } from \"react\";",
      "import { IUseStoreFromContainerProps, useStoreStateFromContainer } from \"rfluxx\";",
      "",
      "import { I$3Store, I$3StoreState } from \"./$3Store\";",
      "",
      "/**",
      " * Props for { @$1 }",
      " */",
      "export interface I$1Props extends IUseStoreFromContainerProps",
      "{",
      "}",
      "",
      "/**",
      " * Component that $2.",
      " */",
      "export const $1: React.SFC<IFuncCounterProps> = props =>",
      "{",
      "    const [ storeState, store ] = useStoreStateFromContainer<I$3Store, I$3StoreState>(props);",
      "    const $4 = useCallback(() => store.$4.trigger(1), [ store ]);",
      "",
      "    if (!storeState)",
      "    {",
      "        return null;",
      "    }",
      "",
      "    return <div></div>;",
      "}",
      ""
		],
		"description": "A simple functional react component with binding to a store via hook."
	},
    "Rfluxx Material-UI Functional Component": {
		"prefix": "rfluxx_mui_func_comp",
		"body": [
      "import { createStyles, Theme, WithStyles } from \"@material-ui/core\";",
      "import withStyles from \"@material-ui/core/styles/withStyles\";",
			"import * as React from \"react\";",
      "import { useCallback } from \"react\";",
      "import { IUseStoreFromContainerProps, useStoreStateFromContainer } from \"rfluxx\";",
      "",
      "import { I$3Store, I$3StoreState } from \"./$3Store\";",
      "",
      "export const styles = (theme: Theme) => createStyles({",
      "    root: {",
      "    }",
      "});",
      "",
      "/**",
      " * Props for { @$1 }",
      " */",
      "export interface I$1Props",
      "    extends WithStyles<typeof styles>, IUseStoreFromContainerProps",
      "{",
      "}",
      "",
      "/**",
      " * Component that $2.",
      " */",
      "export const $1 = withStyles(styles)(",
      "    class extends React.Component<I$1Props, I$1State>",
      "    {",
      "        /**",
      "         * Renders the component.",
      "         */",
      "        public render(): React.ReactNode",
      "        {",
      "            const { classes, ...rest } = this.props;",
      "",
      "            return <input type=\"text\"",
      "                          value={this.props.someString}",
      "                          onChange={this.props.setString}",
      "                          className={classes.root}/>;",
      "        }",
      "    }",
      ");",
      ""
		],
		"description": "A functional material-ui react component with binding to a store via hook."
  },
  "Rfluxx hook store": {
    "prefix": "rfluxx_react_hook_store",
    "description": "Call hook to bind to store state.",
    "body": [
      "const [ storeState, store ] = useStoreState(props.store);"
    ]
  },
  "Rfluxx hook store from container": {
    "prefix": "rfluxx_react_hook_container",
    "description": "Call hook to bind to store state from container.",
    "body": [
      "const [ storeState, store ] = useStoreStateFromContainer<I$1Store, I$1StoreState>(props);"
    ]
  },
  "Rfluxx hook store from context": {
    "prefix": "rfluxx_react_hook_container",
    "description": "Call hook to bind to store state from container context.",
    "body": [
      "const [ storeState, store ] = useStoreStateFromContainerContext<I$1Store, I$1StoreState>(props);"
    ]
  },  
  "Rfluxx store action callback": {
    "prefix": "rfluxx_react_hook_action_callback",
    "description": "Call hook to bind a callback to a store action.",
    "body": [
      "const $1 = useCallback(($2$3) => store.$1.trigger($2), [ store ]);"
    ]
  },
  "Rfluxx i18n language choose component": {
    "prefix": "rfluxx_i18n_langsel",
    "description": "A component to choose the active language",
    "body": [
        "import { createStyles, MenuItem, Select, Theme, WithStyles } from \"@material-ui/core\";",
        "import withStyles from \"@material-ui/core/styles/withStyles\";",
        "import * as React from \"react\";",
        "import { subscribeStoreSelect, IResolveStoreFromContainerProps } from \"rfluxx-react\";",
        "import { IResourceStore, IResourceStoreState } from \"rfluxx-i18n\";",
        "import { usePageContext, IPageContextProps } from \"rfluxx-routing\";",
        "",
        "import { Language, ResourceText } from \"./Languages\";",
        "import { ResourceTexts } from \"./Resources.en\";",
        "",
        "export const styles = (theme: Theme) => createStyles({",
        "    root: {",
        "    }",
        "});",
        "",
        "/**",
        " * State for { @LanguageChooser }",
        " */",
        "export interface ILanguageChooserState",
        "{",
        "",
        "}",
        "",
        "/**",
        " * Props for { @LanguageChooser }",
        " */",
        "export interface ILanguageChooserProps",
        "    extends WithStyles<typeof styles>, IPageContextProps",
        "{",
        "    /**",
        "     * The languages that are available for choosing.",
        "     */",
        "    languages: Language[];",
        "",
        "    /**",
        "     * The currently selected language.",
        "     */",
        "    activeLanguage: Language;",
        "",
        "    /**",
        "     * Change the language.",
        "     */",
        "    setLanguage: (e) => void;",
        "}",
        "",
        "/**",
        " * Component that allows to select a language.",
        " */",
        "export const LanguageChooserComp = withStyles(styles)(",
        "    class extends React.Component<ILanguageChooserProps, ILanguageChooserState>",
        "    {",
        "        /**",
        "         * Renders the component.",
        "         */",
        "        public render(): React.ReactNode",
        "        {",
        "            const { classes, languages, activeLanguage, setLanguage, ...rest } = this.props;",
        "",
        "            return <Select value={activeLanguage ? activeLanguage.key : \"\" }",
        "                            onChange={setLanguage}>",
        "                {languages && languages.map(x => {",
        "                    return <MenuItem value={x.key}>",
        "                        {x.caption}",
        "                    </MenuItem>;",
        "                })}",
        "            </Select>;",
        "        }",
        "    }",
        ");",
        "",
        "// this code binds the component to the ResourceStore",
        "// the actual instance of the ResourceStore is not yet given",
        "const LanguageChooserBound = subscribeStoreSelect<IResourceStore<ResourceTexts>, IResourceStoreState<ResourceTexts>>()(",
        "    LanguageChooserComp,",
        "    (storeState, store) => ({",
        "        // bind the stores state to this components props",
        "        activeLanguage: storeState.activeLanguage,",
        "        languages: storeState.availableLanguages,",
        "        setLanguage: e => store.setLanguage.trigger(e.target.value)",
        "    })",
        ");",
        "",
        "// not so nice yet :( but the type system currently fails here",
        "export const LanguageChooser = usePageContext(LanguageChooserBound) as React.ComponentType<IResolveStoreFromContainerProps<IResourceStore<ResourceTexts>, IResourceStoreState<ResourceTexts>>>;"        
    ]
  }
}